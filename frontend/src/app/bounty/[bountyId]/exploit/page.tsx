"use client";
import { FC, useState } from "react";

import {
    Box,
    Button,
    Code,
    Center,
    Group,
    Stack,
    TextInput,
    Textarea,
    useMantineTheme,
    Title,
    Text,
    Paper,
    Tabs,
} from "@mantine/core";
import { isNotEmpty, useForm } from "@mantine/form";

import { useWaitForTransaction } from "wagmi";
import { TestExploit } from "../../../../model/inputs";
import { usePrepareSendExploit } from "../../../../hooks/bug-buster";
import { useInputBoxAddInput } from "../../../../hooks/contracts";

import { BountyParams, ConcreteBountyParams } from "../utils.tsx";
import { useBounty } from "../../../../model/reader";
import { FileDrop } from "../../../../components/filedrop";

interface FileDropTextParams {
    filename?: string;
}

const FileDropText: FC<FileDropTextParams> = ({ filename }) => {
    if (filename) {
        return (
            <Box>
                <Text size="lg">Exploit script uploaded!</Text>
                <Code>{filename}</Code>
            </Box>
        );
    } else {
        return <Text size="lg">Drop your exploit script here!</Text>;
    }
};

interface SendExploitFormValues {
    name: string;
    imgLink?: string;
    exploit: string;
}

const SendExploitForm: FC<ConcreteBountyParams> = ({ bountyIndex, bounty }) => {
    const [filename, setFilename] = useState<string>();

    const form = useForm<SendExploitFormValues>({
        initialValues: {
            name: "",
            exploit: "",
        },
        validate: {
            name: isNotEmpty("An exploiter name is required"),
        },
    });

    const { name, imgLink, exploit } = form.values;

    const [exploitOutput, setExploitOutput] = useState("");

    async function testExploitAsync(bountyIndex: number, exploit: string) {
        const inspectRequest: TestExploit = { bountyIndex, exploit };
        setExploitOutput("Testing...");

        const INSPECT_URL = process.env.NEXT_PUBLIC_INSPECT_URL;
        if (INSPECT_URL === undefined || INSPECT_URL == "") {
            setExploitOutput("Inspect URL is not set");
            return;
        }

        const response = await fetch(INSPECT_URL, {
            method: "POST",
            headers: {
                "Content-Type": "application/octet-stream",
            },
            body: Buffer.from(JSON.stringify(inspectRequest)),
        });

        const body = await response.json();
        if (body.status == "Accepted") {
            setExploitOutput("Exploit test succeeded!");
        } else {
            // prettier-ignore
            setExploitOutput(body.reports
                .map((report: { payload: string }) => Buffer.from(report.payload.substring(2), "hex").toString("ascii"))
                .reduce((text: string, acc: string) => text + acc));
        }
    }

    const testExploit = () => {
        testExploitAsync(bountyIndex, exploit);
    };

    const config = usePrepareSendExploit({
        name,
        imgLink,
        bountyIndex,
        exploit,
    });

    const { data, write } = useInputBoxAddInput(config);
    const { isLoading, isSuccess } = useWaitForTransaction({
        hash: data?.hash,
    });

    return (
        <form onSubmit={form.onSubmit(() => write && write())}>
            <Stack w={800}>
                <Title size="h1">Submit exploit</Title>
                <Text size="lg" fw={700} c="dimmed">
                    {bounty.name}
                </Text>
                <TextInput
                    withAsterisk
                    size="lg"
                    label="Name"
                    placeholder="Hacker"
                    {...form.getInputProps("name")}
                />
                <TextInput
                    size="lg"
                    label="Avatar URL"
                    placeholder="https://"
                    {...form.getInputProps("imgLink")}
                />
                <Tabs defaultValue="script">
                    <Tabs.List>
                        <Tabs.Tab value="script">Script</Tabs.Tab>
                        <Tabs.Tab value="file">File</Tabs.Tab>
                    </Tabs.List>
                    <Tabs.Panel value="script">
                        <Textarea
                            autosize
                            minRows={10}
                            maxRows={40}
                            multiline={true}
                            styles={{
                                input: { fontFamily: "monospace" },
                            }}
                            placeholder="Exploit code"
                            error={form.getInputProps("exploit").error}
                            onChange={(e) =>
                                form.setFieldValue(
                                    "exploit",
                                    btoa(e.target.value),
                                )
                            }
                        />
                    </Tabs.Panel>
                    <Tabs.Panel value="file">
                        <FileDrop
                            onDrop={(filesWithPath) => {
                                const fileWithPath = filesWithPath.at(0);
                                if (fileWithPath !== undefined) {
                                    // prettier-ignore
                                    fileWithPath
                                        .arrayBuffer()
                                        .then((buf) => {
                                            // prettier-ignore
                                            const str = Array.from(new Uint8Array(buf))
                                                .map((b) => String.fromCharCode(b))
                                                .join("");

                                            form.setFieldValue("exploit", btoa(str));
                                            setFilename(fileWithPath.name);
                                        });
                                }
                            }}
                        >
                            <FileDropText filename={filename} />
                        </FileDrop>
                    </Tabs.Panel>
                </Tabs>
                {exploitOutput && (
                    <Paper
                        withBorder
                        radius="sm"
                        p={4}
                        styles={{
                            root: {
                                backgroundColor: "black",
                                color: "white",
                            },
                        }}
                    >
                        <Text
                            styles={{
                                root: {
                                    backgroundColor: "black",
                                    color: "white",
                                    whiteSpace: "pre-wrap",
                                    fontFamily: "monospace",
                                },
                            }}
                        >
                            {exploitOutput}
                        </Text>
                    </Paper>
                )}
                <Group justify="center" grow>
                    <Button size="lg" onClick={testExploit}>
                        Test
                    </Button>
                    <Button
                        size="lg"
                        type="submit"
                        disabled={!write || isLoading || isSuccess}
                    >
                        {isSuccess
                            ? "Submitted!"
                            : isLoading
                            ? "Submitting..."
                            : "Submit"}
                    </Button>
                </Group>
            </Stack>
        </form>
    );
};

const SendExploitPage: FC<BountyParams> = ({ params: { bountyId } }) => {
    const theme = useMantineTheme();

    const bountyIndex = Number(bountyId);

    const bountyResult = useBounty(bountyIndex);

    switch (bountyResult.kind) {
        case "loading":
            return <Center>Loading bounty info...</Center>;
        case "error":
            return <Center>{bountyResult.message}</Center>;
        case "success":
            return (
                <Center>
                    <Box p={20} mt={50} bg={theme.colors.dark[7]}>
                        <SendExploitForm
                            bountyIndex={bountyIndex}
                            bounty={bountyResult.response}
                        />
                    </Box>
                </Center>
            );
    }
};

export default SendExploitPage;
